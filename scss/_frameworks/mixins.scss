// PROJECT MIXINS --------------------- //

// This is a selections of project agnostic mixins. Think of it as a small
// framework of sorts. You should never need to edit anything in here
// anything in here from project to project.

// This file is imported to 'global.scss' and does not compile directly.

//--------------------------------//

// BREAKPOINTS

@mixin bp($point) {
  @if      $point == palm      { @media (max-width: $viewport_palm - 1px) { @content; } }
  @else if $point == lap       { @media (min-width: $viewport_palm) { @content; } }
  @else if $point == portable  { @media (min-width: $viewport_lap) { @content; } }
  @else if $point == desk      { @media (min-width: $viewport_desk) { @content; } }
  // additional breakpoints just state the argument //
  @else { @media ($point) { @content; } }
}

//--------------------------------//

// SIZE - easily size any selector

@mixin size($width, $height: $width) { // width and height, if left blank height defaults to width.
  width: $width;
  height: $height;
}

// USAGE:

// '@include size( width, height(optional) );'
// NB - if only one value is given both the height and width will be outputed as that

//--------------------------------//

// SVG BACKGROUND IMAGES - Give an element an SVG background with a PNG fallback
// you will need an svg and a png version of your image in the img directory

@mixin svg($name, $xpos, $ypos) {
  background: url('{#{$image_directory}#{$name}.png') no-repeat; // sets the fallback image
  background: none, url('#{$image_directory}#{$name}.svg') no-repeat; // sets the svg image
  background-position: $xpos $ypos; // sets the backgroung position
}

// USAGE:

// '@include svg(image-name, x-position, y-position);'
// NB - the image name should be without the extension: 'logo' rather than 'logo.svg'

//--------------------------------//

//RETINA BACKGROUND IMAGES - Provide Retina screen with a @2x version
// you will need to upload your image to the img directory first

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), // sets the media query rules
      (-o-min-device-pixel-ratio: 2.6/2),
      (-webkit-min-device-pixel-ratio: 1.3),
      (min-device-pixel-ratio: 1.3),
      (min-resolution: 1.3dppx) {
    background-image: url('#{$image_directory}#{$image}'); // sets the retina image
    background-size: $width $height; // sets the background size
  }
}

// USAGE:

// '@include image-2x(image-name.png, background-width, background-height)'
// NB - notice how this time we do need to state the extension of the image.
// This is because this mixin is used along side the standard background.

//--------------------------------//

// POSITIONING - position any selector

@mixin pos($position, $args) { // these arguments are generated below
  position: $position; // sets the position
  $offsets: top right bottom left; // the possible arguments
  @each $o in $offsets { 
    $i: index($args, $o);
    @if $i // only add the offset if it exists
      and $i + 1 <= length($args)
      and type-of( nth($args, $i + 1) ) == number {
      #{$o}: nth($args, $i + 1); // add each offest as it's own line 'offset-name: value'
    }
  }
}

@mixin absolute($args) { // for absolute positioning
  @include pos(absolute, $args);
}

@mixin fixed($args) { // for fixed positioning
  @include pos(fixed, $args);
}

@mixin relative($args) { // for relative positioning
  @include pos(relative, $args);
}

// USAGE:

// with this we can state the mixin name as whichever position type we need, followed by whichever arguments we need.
// eg. '@include relative( top 10px left 10px);'
// OR. '@include absolute( bottom 10px right 10px);'
// OR. '@include fixed( top 10px left auto bottom auto right 10px);'

// NB - we can state as few(0) or as many(4) position arguments as we like.

//--------------------------------//